AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Deploy Python code to Lambda
Resources:
  LambdaFunction1:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ccbd-hw2-lambda1-cf
      CodeUri: /tmp/output.zip
      Handler: lambda1.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 10 # seconds, 900 max
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess
        - AmazonRekognitionFullAccess
        - AmazonOpenSearchServiceFullAccess
      Events:
        PhotoUploadedEvent:
          Type: S3
          Properties:
            Bucket: !Ref PhotoSrcBucket
            Events: s3:ObjectCreated:Put
  LambdaFunction2:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ccbd-hw2-lambda2-cf
      CodeUri: /tmp/output.zip
      Handler: lambda2.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 10 # seconds, 900 max
      Policies:
        - AmazonLexFullAccess
        - AmazonOpenSearchServiceFullAccess
      Events:
        HttpGet:
          Type: Api
          Properties:
            Path: '/search'
            Method: get
  PhotoSrcBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: "ccbd-hw2-photos-cf"
    # roles
  s3AWSIntegrationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
  # policies
  apiGatewayExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref s3AWSIntegrationExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource: '*'
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Resource: '*'

  # API Gateway
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        DefaultAuthorizer:
          NONE
      DefinitionBody: {
        "swagger" : "2.0",
        "info" : {
          "description" : "AI Photo Search application, built during the Cloud and Big Data course at Columbia University.",
          "version" : "1.0.0",
          "title" : "AI Photo Search"
        },
        "basePath" : "/dev",
        "schemes" : [ "https" ],
        "paths" : {
          "/search" : {
            "get" : {
              "operationId" : "searchPhotos",
              "produces" : [ "application/json" ],
              "parameters" : [ {
                "name" : "q",
                "in" : "query",
                "required" : false,
                "type" : "string"
              } ],
              "responses" : {
                "200" : {
                  "description" : "200 response",
                  "schema" : {
                    "$ref" : "#/definitions/SearchResponse"
                  },
                  "headers" : {
                    "Access-Control-Allow-Origin" : {
                      "type" : "string"
                    }
                  }
                },
                "500" : {
                  "description" : "500 response",
                  "schema" : {
                    "$ref" : "#/definitions/Error"
                  }
                },
                "403" : {
                  "description" : "403 response",
                  "schema" : {
                    "$ref" : "#/definitions/Error"
                  }
                }
              }
            },
          },
          "/upload/{folder}/{object}" : {
            "put" : {
              "produces" : [ "application/json" ],
              "parameters" : [ {
                "name" : "object",
                "in" : "path",
                "required" : true,
                "type" : "string"
              }, {
                "name" : "folder",
                "in" : "path",
                "required" : true,
                "type" : "string"
              }, {
                "name" : "x-amz-meta-customLabels",
                "in" : "header",
                "required" : false,
                "type" : "string"
              } ],
              "responses" : {
                "200" : {
                  "description" : "200 response",
                  "headers" : {
                    "Access-Control-Allow-Origin" : {
                      "type" : "string"
                    }
                  }
                },
                "500" : {
                  "description" : "500 response"
                },
                "403" : {
                  "description" : "403 response"
                }
              },
              "security" : [ {
                "api_key" : [ ]
              } ],
              "x-amazon-apigateway-integration": {
                "credentials": !GetAtt s3AWSIntegrationExecutionRole.Arn,
                "responses": {
                  "4\\d{2}": {
                    "statusCode": "400"
                  },
                  "default": {
                    "statusCode": "200",
                    "responseParameters": {
                      "method.response.header.Content-Type": "integration.response.header.Content-Type"
                    }
                  },
                  "5\\d{2}": {
                    "statusCode": "500"
                  }
                },
                "requestParameters": {
                  "integration.request.path.object": "method.request.path.object",
                  "integration.request.path.bucket": "method.request.path.folder",
                  "integration.request.header.x-amz-meta-customLabels" : "method.request.header.x-amz-meta-customLabels"
                },
                "uri": "arn:aws:apigateway:us-east-1:s3:path/{bucket}/{object}",
                "passthroughBehavior": "when_no_match",
                "httpMethod": "PUT",
                "type": "aws"
              }
            },
          }
        },
        "securityDefinitions" : {
          "api_key" : {
            "type" : "apiKey",
            "name" : "x-api-key",
            "in" : "header"
          }
        },
        "definitions" : {
          "Error" : {
            "type" : "object",
            "properties" : {
              "code" : {
                "type" : "integer",
                "format" : "int32"
              },
              "message" : {
                "type" : "string"
              }
            }
          },
          "Photo" : {
            "type" : "object",
            "properties" : {
              "url" : {
                "type" : "string"
              },
              "labels" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "SearchResponse" : {
            "type" : "object",
            "properties" : {
              "results" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/definitions/Photo"
                }
              }
            }
          }
        }
      }