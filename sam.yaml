AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Deploy Python code to Lambda
Resources:
  LambdaFunction1:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ccbd-hw2-lambda1-cf
      CodeUri: /tmp/output.zip
      Handler: lambda1.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 10 # seconds, 900 max
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess
        - AmazonRekognitionFullAccess
        - AmazonOpenSearchServiceFullAccess
      Events:
        PhotoUploadedEvent:
          Type: S3
          Properties:
            Bucket: !Ref PhotoSrcBucket
            Events: s3:ObjectCreated:Put
  LambdaFunction2:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ccbd-hw2-lambda2-cf
      CodeUri: /tmp/output.zip
      Handler: lambda2.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 10 # seconds, 900 max
      Policies:
        - AmazonLexFullAccess
        - AmazonOpenSearchServiceFullAccess
      Events:
        HttpGet:
          Type: Api
          Properties:
            Path: '/search'
            Method: get
  PhotoSrcBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: "ccbd-hw2-photos-cf"
    # roles
  s3AWSIntegrationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
  # policies
  apiGatewayExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-apiGatewayExecutionPolicy
      Roles:
        - !Ref s3AWSIntegrationExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource: '*'
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Resource: '*'
          -
            Effect: Allow
            Action:
              - lambda:*
            Resource: '*'

  # API Gateway
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        DefaultAuthorizer:
          NONE
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: swagger.yaml
 
  ApiKey: 
    Type: AWS::ApiGateway::ApiKey
    DependsOn: [ApiUsagePlan]
    Properties: 
      Name: !Join ["", [{"Ref": "AWS::StackName"}, "-apikey"]]
      Description: "CloudFormation API Key V1"
      Enabled: true
      GenerateDistinctId: false
      Value: abcdefg123456665ffghsdghfgdhfgdh4565
      StageKeys:
        - RestApiId: !Ref ApiGatewayApi
          StageName: dev

  ApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    DependsOn:
      - ApiGatewayApi
    Properties:
      ApiStages: 
        - ApiId: !Ref ApiGatewayApi
          Stage: dev
      Description: !Join [" ", [{"Ref": "AWS::StackName"}, "usage plan"]]
      Quota:
        Limit: 1000
        Period: MONTH
      UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]

  ApiUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    DependsOn: 
      - ApiGatewayApi
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan
